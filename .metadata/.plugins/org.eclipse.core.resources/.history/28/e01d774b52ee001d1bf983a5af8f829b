/*
 * Patient.h
 *
 *  Created on: 05-May-2023
 *      Author: umerfarooq
 */

#ifndef PATIENT_H_
#define PATIENT_H_

#include <iostream>
#include <fstream>
#include <cstring>
#include "Doctor.h"
#include "Appointment.h"
using namespace std;

class Patient
{
	// 	Appointment *ap;
	string id;
	string name;
	string username;
	string password;
	string did;
	Doctor *doc;
	

public:
	Patient() {}
	void setval();
	bool com(string id);
	bool compare(string uname);
	void patient_details();
	void patient_details(string id);
	void login();
	void user_login();
	void call();
	string &getId() { return id; }
	string &getName() { return name; }
	string &getPassword() { return password; }
	string &getUsername() { return username; }
	void getDoc();
	Patient rtn(string id);
};
Patient Patient::rtn(string id)
{
	Patient temp;
	ifstream fin("patients.dat", ios::binary);
	while (fin.good())
	{
		fin.read(reinterpret_cast<char *>(&temp), sizeof(temp));
		if (id.compare(temp.id) == 0)
		{
			return temp;
		}
	}
	return *this;
}
void Patient::getDoc()
{
	patient_details();
	doc->doctor_details();
}
void Patient::setval()
{
	cout << "Enter name: ";
	cin.ignore();
	getline(cin, name);
	cout << "Enter id: ";
	cin >> id;
	while (com(id))
	{
		cout << "the Id you entered already exist" << endl;
		cout << "enter another" << endl;
		cin >> id;
	}
	cout << "Enter Username : " << endl;
	cin >> username;
	while (compare(username))
	{
		cout << "Username exists. Enter again" << endl;
		cout << "Enter Username : " << endl;
		cin >> username;
	}
	cout << "Enter Password : " << endl;
	cin >> password;

	Patient t;
	t.username = username;
	t.password = password;
	t.id = id;
	t.name = name;
	t.doc = doc;
	ofstream fout("patients.dat", ios::binary | ios::app);
	fout.write(reinterpret_cast<char *>(&t), sizeof(t));
	fout.close();
}

void Patient::user_login()
{
	int flag = 0;
	Patient temp;
	ifstream fin("patients.dat", ios::binary);
	while (fin.good())
	{
		fin.read(reinterpret_cast<char *>(&temp), sizeof(temp));
		if (temp.username == username && temp.password == password)
		{
			flag++;
			cout << "login succesful" << endl;
			break;
		}
	}
	if (flag == 0)
	{
		cout << "\nlogin unsucessful" << endl
			 << endl;
	}
	else
	{
		call();
	}
}
void Patient::login()
{
	cout << "Enter Username : " << endl;
	cin >> username;

	cout << "Enter Password : " << endl;
	cin >> password;
}

bool Patient::com(string id)
{
	int flag = 0;
	Patient temp;
	ifstream fin("patients.dat", ios::binary);
	while (fin.good())
	{
		fin.read(reinterpret_cast<char *>(&temp), sizeof(temp));
		if (id.compare(temp.id) == 0)
		{
			flag = 1;
			break;
		}
	}
	if (flag == 1)
		return true;
	else
		return false;
}
bool Patient::compare(string uname)
{
	int flag = 0;
	Patient temp;
	ifstream fin("patients.dat", ios::binary);
	while (fin.good())
	{
		fin.read(reinterpret_cast<char *>(&temp), sizeof(temp));
		if (uname.compare(temp.username) == 0)
		{
			flag = 1;
			break;
		}
	}
	if (flag == 1)
		return true;
	else
		return false;
}
void Patient::patient_details()
{
	cout << "Patient Name: " << name << endl;
	cout << "Patient ID: " << id << endl;
	cout << "Patient Username: " << username << endl;
	cout << "Patient Password: " << password << endl;
}
void Patient::patient_details(string id)
{
	int flag = 0;
	Patient temp;
	ifstream fin("patients.dat", ios::binary);
	while (fin.good())
	{
		fin.read(reinterpret_cast<char *>(&temp), sizeof(temp));
		if (id.compare(temp.id) == 0)
		{
			flag = 1;
			break;
		}
	}
	if (flag == 1)
	{
		temp.patient_details();
	}
	else
		cout << "ID not found" << endl;
}
#endif /* PATIENT_H_ */
